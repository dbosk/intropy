\section{Overview}

We want to get results out of Canvas and put them into LADOK.
We want to take each assignment group in Canvas and map into a course component 
in LADOK.
\emph{Assumption}:
we assume that all assignments in the Canvas course instance are grouped; and 
each group must map exactly to the names of the LADOK components.

The course components in LADOK (and assignment groups in Canvas) for the prgi 
(DD1315) course are
\begin{itemize}
\item LAB1,
\item LAB2,
\item LAB3,
\item MAT1\footnote{%
  URL: \url{https://www.kth.se/student/kurser/kurs/DD1315}
}.
\end{itemize}
The LAB3 component corresponds to a project.
In Canvas, it has P/F assignments (\eg presentation) and one A--F assignment
(the project itself).
The component grade is based on the project itself, but the other assignments 
each must have a P too.

For now we will ignore setting the grade on the full course.

When running the program we must have the following environment variables set:
\begin{itemize}
\item [[LADOK_LOGIN]] and [[LADOK_PASSWD]] which hold the credentials for LADOK 
(or KTH CAS).
\item [[CANVAS_SERVER]] and [[CANVAS_TOKEN]] to point to the Canvas server to 
use and a token to authenticate.
\end{itemize}

We provide a Docker image for running this program.

\subsection{Building files}

We provide the following files:
\begin{itemize}
\item [[<<canvas2ladok.mk>>]].
\item [[<<Dockerfile>>]],
\item [[<<canvas2ladok.py>>]],
\end{itemize}

We provide an include file for GNU make to build all the targets.
<<canvas2ladok.mk>>=
.PHONY: all
all: canvas2ladok.py prgi2ladok

.PHONY: prgi2ladok
prgi2ladok: canvas2ladok.py Dockerfile
	docker build -t prgi2ladok .

Dockerfile: canvas2ladok.nw
	${NOTANGLE}

.PHONY: clean
clean:
	${RM} canvas2ladok.pdf canvas2ladok.py
	${RM} Dockerfile canvas2ladok.mk

.PHONY: distclean
distclean:
	-docker image rm prgi2ladok
@

The Docker image will just contain the [[canvas2ladok.py]] file and run it by 
default.
<<Dockerfile>>=
FROM dbosk/ladok3

RUN pip install --no-cache-dir canvasapi
COPY canvas2ladok.py ./

CMD ["python", "./canvas2ladok.py"]
@


\section{[[canvas2ladok.py]]: configuration and dependencies}

We use the standard structure for the script.
We start with the imports and set up our [[ladok]] and [[canvas]] objects, 
these are used to access the two systems.
<<canvas2ladok.py>>=
import cachetools
from canvasapi import Canvas
import collections
import datetime
import ladok3
import os
import re

LOGIN = os.environ["LADOK_USER"]
PASSWD = os.environ["LADOK_PASS"]

ladok = ladok3.LadokSessionKTH(
        LOGIN, PASSWD,
        test_environment=False) # for experiments

API_URL = os.environ["CANVAS_SERVER"]
API_KEY = os.environ["CANVAS_TOKEN"]

canvas = Canvas(API_URL, API_KEY)

course_code_ladok = "DD1315"
# We match all course round HT20 and onwards
course_code_canvas = "DD1315[HV]T[2-9][0-9]"
components = [
  "LAB1",
  "LAB2",
  "LAB3",
  "MAT1"
]

<<classes>>
<<functions>>

def main():
  <<main body>>

if __name__ == "__main__":
  main()
@


\section{Getting the results out of Canvas}

We must first select the course.
We do this my matching against a regular expression.
<<functions>>=
@cachetools.cached(cache={})
def get_courses(code):
  pattern = re.compile(code)

  for course in canvas.get_courses():
    if pattern.match(course.course_code):
      yield course

  return None
@

We must process each assignment group (which corresponds to a LADOK component).
So we get all relevant objects from Canvas.
<<functions>>=
def get_components(course):
  for component in course.get_assignment_groups():
    if component.name in components:
      yield component
@

For each component, we must check which students passed all assignments; we 
must report the student's LADOK identifier, what grade they should have and the 
time of submission of the assignment.
<<functions>>=
def students_results(course, component):
  <<produce results for a component>>
@ We cover the details in \cref{producing-results}, once we've covered what 
LADOK needs in \cref{into-ladok}.

\section{The main body}

Then we can report those results to LADOK.
In summary, we do the following:
<<main body>>=
for course in get_courses(course_code_canvas):
  for component in get_components(course):
    print(f"{course.course_code} {component.name}")
    component_results = students_results(course, component)
    report_results(course_code_ladok, component.name, component_results)
@


\section{Putting the results into LADOK}\label{into-ladok}

We get a list of results for a component.
We simply try to report them to LADOK.
<<functions>>=
def report_results(course_code, component_name, results):
  for result in results:
    try:
      student = ladok.get_student(result.person_nr)
      course = student.courses(code=course_code)[0]
      component = course.results(component=component_name)[0]
      if not component.attested:
        component.set_grade(result.grade, result.date)
        component.finalize()
      elif component.grade != result.grade:
        print(f"{student}: attested {component.component} "
          f"result {component.grade} is different from {result.grade}.")
    except Exception as err:
      try:
        print(f"{student}: {err}")
      except ValueError as verr:
        print(f"{verr}: {result.person_nr}: {err}")
@


\section{Producing the list of results}\label{producing-results}

We need the result to have the following data:
<<classes>>=
Result = collections.namedtuple(
  "Result", ["person_nr", "date", "grade", "grade_scale"])
@ Now, given a [[component]], we should produce such [[Result]] tuples.

\subsection{Produce gradebook}

To do this, we must first produce a gradebook that we can filter.
The gradebook will use the simpler [[Grade]] tuple.
It will use the student's LADOK ID as the key.
<<classes>>=
Grade = collections.namedtuple("Grade", ["grade", "date"])
@

To create the gradebook, we will first fetch all the users and then fetch all 
the submissions.
Then we will map them together.
This way we only need two requests to Canvas, instead of one per user.
<<functions>>=
def make_gradebook(course, component):
  gradebook = {}

  users_by_id = {}
  for user in course.get_users(enrollment_type=["student"]):
    users_by_id[user.id] = user
    gradebook[user.integration_id] = {}

  for assignment in assignments_in_component(course, component):
    for submission in assignment.get_submissions():
      try:
        user = users_by_id[submission.user_id].integration_id
      except KeyError:
        # This only happens for the Test Student
        continue

      if not submission.graded_at:
        gradebook[user][assignment.name] = None
        continue

      date = submission.submitted_at or submission.graded_at
      date = datetime.date.fromisoformat(date.split("T")[0]) or None
      graded_date = datetime.date.fromisoformat(
        submission.graded_at.split("T")[0])
      if date > graded_date:
        date = graded_date

      gradebook[user][assignment.name] = \
        Grade(grade=submission.grade, date=date)

  return gradebook
@ Note that for some users, we won't get any submission.
And for some other users, we get a submission with no grade and no date.

We the component object doesn't give the assignments it include.
We must check each assignment if it belongs to the component or not.
<<functions>>=
def assignments_in_component(course, component):
  return filter(
    lambda assignment: assignment.assignment_group_id == component.id,
    course.get_assignments())
@

\subsection{Assignment grades to component grade}

Next, we must filter the gradebook so that only the students who passed all 
assignments are reported to LADOK with a pass.
A student must pass all assignments, the latest date sets the date to use in 
LADOK.
\emph{Assumption:}
If some assignments are P/F and some are A--F, then the A--F one should be the 
grade.
There will not be more than one A--F assignment per component.
<<functions>>=
def summarize(grades):
  max_grade = "P"
  grade_scale = "PF"
  max_date = datetime.date(year=1970, month=1, day=1)
  for _, grade in grades.items():
    if grade is None or grade.grade is None or grade.grade[0] == "F":
      return None

    if grade.date > max_date:
      max_date = grade.date

    if grade.grade in "ABCDE":
      max_grade = grade.grade
      grade_scale = "AF"

  return (Grade(grade=max_grade, date=max_date), grade_scale)
@

\subsection{Convert to LADOK result form}

Lastly, we must put these things together and convert the result to the 
[[Result]] format that we need.
<<produce results for a component>>=
to_report = []
gradebook = make_gradebook(course, component)

for ladok_id, grades in gradebook.items():
  try:
    grade, grade_scale = summarize(grades)
  except TypeError as err:
    # Only happens for students who are not done
    continue

  to_report.append(Result(
    person_nr=ladok.get_student(ladok_id).personnummer,
    grade=grade.grade,
    grade_scale=grade_scale,
    date=grade.date))

return to_report
@

