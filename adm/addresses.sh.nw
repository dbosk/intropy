\section{Why do we need the IP ranges or computer labs?}

So we have a quiz assignment in Canvas that we want the
students to do in a proctored setting (it's a KS). However, to prevent
them from doing it at home, or any other unproctored setting, during the time 
window of the exam, we have these options:

\begin{enumerate}
  \item Setting which IPs they can access the quiz from. Canvas allows for 
  this. Then I'll just list the IP ranges for the booked lab rooms. Hence, they 
  can't access the quiz from outside of the proctored environment.

  \item\label{CanvasExamRoom} Assign the quiz only to those who signed up. 
  However, it would still need the IP-blocking, since otherwise they can do it 
  from home anyway as long as they signed up.

  \item Just invalidate whoever submitted anything but wasn't recorded present 
  by the invigilators. This is a lot of manual work. And they can still leave 
  the room after 30 minutes and finish the quiz outside of the proctored 
  environment with aids that we don't allow.
\end{enumerate}

In our setting, the quiz was in the normal Canvas room of the course.
If we instead have a dedicated exam room in Canvas, that's just equivalent to 
option \ref{CanvasExamRoom} above.
To improve on option \ref{CanvasExamRoom} to not have to use an IP block, we 
need that the proctors note the time every student leaves so that we can 
compare the time they left to the time they submitted.


\section{A script to help with the address ranges}

This is a script\footnote{%
  Authored by Daniel Bosk.
  Licensed under the MIT license.
  Written with autocompletion by GitHub Copilot.
} that generates a list of addresses for the given lab rooms.
We want to get the intervals, that is, the first and last address in a range 
that spans the lab room.
This way we can easily enter them in Canvas.
<<addresses.sh>>=
#!/bin/bash
# Author: Daniel Bosk <dbosk@kth.se>
# License: MIT
# Description: Generates the address ranges for the given lab rooms.
# Usage: ./addresses.sh <lab room> <lab room> ...
# The lab room is the hostname prefix, eg red (for RÃ¶d) or toke (for Toker).

<<constants>>
<<helper functions>>

rooms=$*
<<generate lab rooms CSV file>>
for room in $rooms; do
  <<print the address interval for [[room]]>>
done
@

\section{Generating a list of lab rooms' addresses}

We'll create a file that contains all addresses of the lab computers.
<<constants>>=
LABROOMS_CSV=$(mktemp)
<<generate lab rooms CSV file>>=
list_lab_computer_hostnames_IPs $rooms > $LABROOMS_CSV
<<helper functions>>=
list_lab_computer_hostnames_IPs() {
  local rooms=$*
  local room
  for room in $rooms; do
    <<print the hostname-address pairs for [[room]]>>
  done
}
@

Now we just need to print the hostname-address pairs for each lab room.
We'll simply use the DNS to enumerate the computers.

There are two possible domains, [[eecs.kth.se]] (for the Unix computers) and 
[[ug.kth.se]] (for the Windows computers).
We'll try both and just ignore any results with [[NXDOMAIN]] in its output.

We'll also ignore any IPv6 addresses, that is, any results containing [[IPv6]] 
in its output.

We'll also assume that there will be less than 100 computer in a lab room.
All lab computers are named [[<room>-<number>]], for instance 
[[red-01.eecs.kth.se]] or [[toke-01.ug.kth.se]].
However, sometimes IT doesn't follow this pattern\footnote{%
  Thanks to Vahid for pointing this out!
}:
For instance, we have [[mat01.ug.kth.se]].
<<print the hostname-address pairs for [[room]]>>=
for num in $(seq -w 1 99); do
  host $room-$num.eecs.kth.se | grep -v NXDOMAIN | grep -v IPv6 \
    | cut -d " " -f 1,4
  host $room$num.eecs.kth.se | grep -v NXDOMAIN | grep -v IPv6 \
    | cut -d " " -f 1,4
  host $room-$num.ug.kth.se | grep -v NXDOMAIN \
    | cut -d " " -f 1,4
  host $room$num.ug.kth.se | grep -v NXDOMAIN \
    | cut -d " " -f 1,4
done
@

\section{Getting the start and end address}

We'll use a file that contains all addresses of the lab room computers.
We find this file in [[LABROOMS_CSV]], as outlined above.
That file contains hostname and IP-address pairs.
We'll filter out (grep) the lines containing the lab room name, then we'll cut 
out the IP-addresses, and finally get the first ([[head]]) and last ([[tail]]).
We assume that they'll be reasonably in order.
In most cases they are, they might deviate if there is a problem, for instance 
that a computer has gotten a completely different IP.
<<helper functions>>=
get_start_end_address() {
  local room=$1
  local addresses=$(grep -i $room $LABROOMS_CSV | cut -d " " -f 2)
  local start=$(echo "$addresses" | head -n 1)
  local end=$(echo "$addresses" | tail -n 1)
  echo $start $end
}
@

This leaves us with the following.
<<print the address interval for [[room]]>>=
get_start_end_address $room
