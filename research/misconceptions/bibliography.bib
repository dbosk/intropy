@book{NCOL,
  title={Necessary conditions of learning},
  author={Marton, Ference},
  year={2014},
  publisher={Routledge}
}

@article{MisconceptionsSurvey2017,
  author = {Qian, Yizhou and Lehman, James},
  title = {Students’ Misconceptions and Other Difficulties in Introductory 
           Programming: A Literature Review},
  year = {2017},
  issue_date = {March 2018},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {18},
  number = {1},
  url = {https://doi.org/10.1145/3077618},
  doi = {10.1145/3077618},
  abstract = {Efforts to improve computer science education are underway, and 
              teachers of computer science are challenged in introductory 
              programming courses to help learners develop their understanding 
              of programming and computer science. Identifying and addressing 
              students’ misconceptions is a key part of a computer science 
              teacher's competence. However, relevant research on this topic is 
              not as fully developed in the computer science education field as 
              it is in mathematics and science education. In this article, we 
              first review relevant literature on general definitions of 
              misconceptions and studies about students’ misconceptions and 
              other difficulties in introductory programming. Next, we 
              investigate the factors that contribute to the difficulties. 
              Finally, strategies and tools to address difficulties including 
              misconceptions are discussed.Based on the review of literature, 
              we found that students exhibit various misconceptions and other 
              difficulties in syntactic knowledge, conceptual knowledge, and 
              strategic knowledge. These difficulties experienced by students 
              are related to many factors including unfamiliarity of syntax, 
              natural language, math knowledge, inaccurate mental models, lack 
              of strategies, programming environments, and teachers’ knowledge 
              and instruction. However, many sources of students’ difficulties 
              have connections with students’ prior knowledge. To better 
              understand and address students’ misconceptions and other 
              difficulties, various instructional approaches and tools have 
              been developed. Nevertheless, the dissemination of these 
              approaches and tools has been limited. Thus, first, we suggest 
              enhancing the dissemination of existing tools and approaches and 
              investigating their long-term effects. Second, we recommend that 
              computing education research move beyond documenting 
              misconceptions to address the development of students’ 
              (mis)conceptions by integrating conceptual change theories. 
              Third, we believe that developing and enhancing instructors’ 
              pedagogical content knowledge (PCK), including their knowledge of 
              students’ misconceptions and ability to apply effective 
              instructional approaches and tools to address students’ 
              difficulties, is vital to the success of teaching introductory 
              programming.},
  journal = {ACM Trans. Comput. Educ.},
  month = {10},
  articleno = {1},
  numpages = {24},
  keywords = {introductory programming, difficulties, conceptual change, 
              constructivism, Misconceptions}
}

@mastersthesis{Plass2015Variables,
  title={Identifying and addressing common programming misconceptions with 
         variables (part 1)},
  author={Plass-Oude Bos, Danny},
  year={2015},
  school={University of Twente}
}
@inproceedings{Kohn2017VariableEvaluation,
  author = {Kohn, Tobias},
  title = {Variable Evaluation: An Exploration of Novice Programmers' 
           Understanding and Common Misconceptions},
  year = {2017},
  isbn = {9781450346986},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3017680.3017724},
  doi = {10.1145/3017680.3017724},
  abstract = {For novice programmers one of the most problematic concepts is 
              variable assignment and evaluation. Several questions emerge in 
              the mind of the beginner, such as what does x = 7 + 4 or x = x + 
              1 really mean? For instance, many students initially think that 
                such statements store the entire calculation in variable x, 
                evaluating the result lazily when actually needed. The common 
                increment pattern x = x + 1 is even believed to be outright 
                impossible. This paper discusses a multi-year project examining 
                how high school students think of assignments and variables. In 
                particular, where does the misconception of storing entire 
                calculations come from? Can we explain the students' thinking 
                and help them develop correct models of how programming 
                works?It is particularly striking that a model of the computer 
                as a machine with algebraic capabilities would indeed produce 
                the observed misconceptions. The misconception might simply be 
                attributed to the expectation that the computer performs 
                computations the exact same way students are taught to in 
                mathematics.},
  booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on 
               Computer Science Education},
  pages = {345–350},
  numpages = {6},
  keywords = {variables, novices, misconceptions, learning, programming},
  location = {Seattle, Washington, USA},
  series = {SIGCSE '17}
}
@techreport{Sleeman1984,
  author={Sleeman, D and Putnam, R T and Baxter, J A and Kuspa, L K},
  title={Pascal and High-School Students: A Study of Misconceptions},
  year={1984},
  institution={Stanford University, School of Education},
  number={009},
  series={Technology Panel Study of Stanford and the Schools},
  type={Occasional report},
  url={https://files.eric.ed.gov/fulltext/ED258552.pdf}
}

@article{Ragonis2005OOP,
  author = { Noa   Ragonis  and  Mordechai   Ben-Ari },
  title = {A long-term investigation of the comprehension of OOP concepts by novices},
  journal = {Computer Science Education},
  volume = {15},
  number = {3},
  pages = {203-221},
  year  = {2005},
  publisher = {Routledge},
  doi = {10.1080/08993400500224310},
}
@article{hatala2003practice,
  title={Practice makes perfect: the critical role of mixed practice in the 
         acquisition of ECG interpretation skills},
  author={Hatala, Rose M and Brooks, Lee R and Norman, Geoffrey R},
  journal={Advances in Health Sciences Education},
  volume={8},
  number={1},
  pages={17--26},
  year={2003},
  publisher={Springer}
}
@article{KumarVeerasamy2016,
  author = {Ashok Kumar Veerasamy and Daryl D'Souza and Mikko-Jussi Laakso},
  title ={Identifying Novice Student Programming Misconceptions and Errors From Summative Assessments},
  journal = {Journal of Educational Technology Systems},
  volume = {45},
  number = {1},
  pages = {50-73},
  year = {2016},
  doi = {10.1177/0047239515627263},
  abstract = {This article presents a study aimed at examining the novice 
              student answers in an introductory programming final e-exam to 
              identify misconceptions and types of errors. Our study used the 
              Delphi concept inventory to identify student misconceptions and 
              skill, rule, and knowledge-based errors approach to identify the 
              types of errors made by novices in Python programming. The 
              students' responses to each question were scrutinized by using 
              the Delphi concept inventory, heuristic-analytic theory, and 
              neo-Piagetian theory of cognitive development for qualitative 
              data analysis. Moreover, the motivation for this exploratory 
              study was to also address the misconceptions that students held 
              in programming and help educators to redefine the teaching 
              methods to correct those alternative conceptions. Student 
              misconceptions were spotted in list referencing and inbuilt 
              functions in Python. In a further quantitative analysis, the 
              study found that students who had misconceptions made knowledge 
              errors and failed to complete the coding tasks. Surprisingly, and 
              coincidentally, it was identified that only a few students were 
              able to write code related to mathematical problems.}
}
@inproceedings{Kurvinen2016,
  author = {Kurvinen, Einari and Hellgren, Niko and Kaila, Erkki and Laakso, 
            Mikko-Jussi and Salakoski, Tapio},
  title = {Programming Misconceptions in an Introductory Level Programming 
           Course Exam},
  year = {2016},
  isbn = {9781450342315},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2899415.2899447},
  doi = {10.1145/2899415.2899447},
  abstract = {Learning to program is known to be a difficult task, as the 
              students typically lack the intrinsic motivation and find the new 
              skills required difficult to master. It is hence typical for the 
              educators to try to constantly improve their teaching methods to 
              enhance the quality and outcome of the courses. We have developed 
              an educational tool called ViLLE, which allows us to create 
              interactive and automatically assessed programming exercises 
              easily. In these exercises, the students have a near-to-authentic 
              programming environment with compiler output and error messages 
              provided. The same tool was used in our university's introductory 
              programming course's final exam. In this paper, we analyze 
              students' answers to three different coding exercises in this 
              final exam. Since ViLLE automatically stores the program code 
              when compiled, we have an access to previously unseen amounts of 
              iterations of the exercise instead of just the final submission. 
              The data is analyzed to identify typical misconceptions in 
              programming exercises, and to show how the students gradually 
              improve their answers based on the results and error messages. 
              Finally, we discuss how the results of the analysis can be 
              utilized to tackle these misconceptions during the course.},
  booktitle = {Proceedings of the 2016 ACM Conference on Innovation and 
               Technology in Computer Science Education},
  pages = {308–313},
  numpages = {6},
  keywords = {automatic assessment, misconceptions, programming},
  location = {Arequipa, Peru},
  series = {ITiCSE '16}
}
@inproceedings{AltadmriBrown2015,
  author = {Altadmri, Amjad and Brown, Neil C.C.},
  title = {37 Million Compilations: Investigating Novice Programming Mistakes 
           in Large-Scale Student Data},
  year = {2015},
  isbn = {9781450329668},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2676723.2677258},
  doi = {10.1145/2676723.2677258},
  abstract = {Previous investigations of student errors have typically focused 
              on samples of hundreds of students at individual institutions. 
              This work uses a year's worth of compilation events from over 
              250,000 students all over the world, taken from the large 
              Blackbox data set. We analyze the frequency, time-to-fix, and 
              spread of errors among users, showing how these factors 
              inter-relate, in addition to their development over the course of 
              the year. These results can inform the design of courses, 
              textbooks and also tools to target the most frequent (or hardest 
              to fix) errors.},
  booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer 
               Science Education},
  pages = {522–527},
  numpages = {6},
  keywords = {programming mistakes, blackbox},
  location = {Kansas City, Missouri, USA},
  series = {SIGCSE '15}
}

@article{Doukakis2007,
author = {Doukakis, Dimitrios and Tsaganou, Grammatiki and Grigoriadou, Maria},
year = {2007},
pages = {},
title = {Understanding the programming variable concept with animated 
         interactive analogies},
booktitle = {Proceedings of the 8th Hellenic European Research on Computer Mathematics \& Its Applications Conference (HERCMA’07)}
}




@inproceedings{Brown2014,
author = {Brown, Neil C.C. and Altadmri, Amjad},
title = {Investigating Novice Programming Mistakes: Educator Beliefs vs. Student Data},
year = {2014},
isbn = {9781450327558},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2632320.2632343},
doi = {10.1145/2632320.2632343},
abstract = {Educators often form opinions on which programming mistakes novices make most often - for example, in Java: "they always confuse equality with assignment", or "they always call methods with the wrong types". These opinions are generally based solely on personal experience. We report a study to determine if programming educators form a consensus about which Java programming mistakes are the most common. We used the Blackbox data set to check whether the educators' opinions matched data from over 100,000 students - and checked whether this agreement was mediated by educators' experience. We found that educators formed only a weak consensus about which mistakes are most frequent, that their rankings bore only a moderate correspondence to the students in the Blackbox data, and that educators' experience had no effect on this level of agreement. These results raise questions about claims educators make regarding which errors students are most likely to commit.},
booktitle = {Proceedings of the Tenth Annual Conference on International Computing Education Research},
pages = {43–50},
numpages = {8},
keywords = {educators, programming mistakes},
location = {Glasgow, Scotland, United Kingdom},
series = {ICER '14}
}
@inproceedings{Kaczmarczyk2010,
author = {Kaczmarczyk, Lisa C. and Petrick, Elizabeth R. and East, J. Philip and Herman, Geoffrey L.},
title = {Identifying Student Misconceptions of Programming},
year = {2010},
isbn = {9781450300063},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1734263.1734299},
doi = {10.1145/1734263.1734299},
abstract = {Computing educators are often baffled by the misconceptions that their CS1 students hold. We need to understand these misconceptions more clearly in order to help students form csorrect conceptions. This paper describes one stage in the development of a concept inventory for Computing Fundamentals: investigation of student misconceptions in a series of core CS1 topics previously identified as both important and difficult. Formal interviews with students revealed four distinct themes, each containing many interesting misconceptions. Three of those misconceptions are detailed in this paper: two misconceptions about memory models, and data assignment when primitives are declared. Individual misconceptions are related, but vary widely, thus providing excellent material to use in the development of the CI. In addition, CS1 instructors are provided immediate usable material for helping their students understand some difficult introductory concepts.},
booktitle = {Proceedings of the 41st ACM Technical Symposium on Computer Science Education},
pages = {107–111},
numpages = {5},
keywords = {cs1, programming, misconceptions, pedagogy, concept inventory, curriculum},
location = {Milwaukee, Wisconsin, USA},
series = {SIGCSE '10}
}

@inproceedings{Holland1997,
author = {Holland, Simon and Griffiths, Robert and Woodman, Mark},
title = {Avoiding Object Misconceptions},
year = {1997},
isbn = {0897918894},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/268084.268132},
doi = {10.1145/268084.268132},
abstract = {This paper identifies and describes a number of misconceptions observed in students learning about object technology. It identifies simple, concrete, measures course designers and teachers can take to avoid these misconceptions arising. The context for this work centres on an introductory undergraduate course and a postgraduate course. Both these courses are taught by distance education. These courses both use Smalltalk as an introduction to object technology. More particularly, the undergraduate course uses Smalltalk as a first programming language.Distance education can limit the amount and speed of individual feedback that can be given in the early stages of learning. For this reason, particular attention has been paid to characterizing measures for avoiding elementary misconceptions seen in beginning learners. At the same time we also address some misconceptions observed in postgraduate students. The pedagogical issues discussed are of particular importance when devising an extended series of examples for teaching or assessment, or when designing a visual microworld to be used for teaching purposes.},
booktitle = {Proceedings of the Twenty-Eighth SIGCSE Technical Symposium on Computer Science Education},
pages = {131–134},
numpages = {4},
location = {San Jose, California, USA},
series = {SIGCSE '97}
}

@inproceedings{Fleury1991,
author = {Fleury, Ann E.},
title = {Parameter Passing: The Rules the Students Construct},
year = {1991},
isbn = {0897913779},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/107004.107066},
doi = {10.1145/107004.107066},
booktitle = {Proceedings of the Twenty-Second SIGCSE Technical Symposium on Computer Science Education},
pages = {283–286},
numpages = {4},
location = {San Antonio, Texas, USA},
series = {SIGCSE '91}
}

@inproceedings{Sekiya2013,
  author = {Sekiya, Takayuki and Yamaguchi, Kazunori},
  title = {Tracing Quiz Set to Identify Novices' Programming Misconceptions},
  year = {2013},
  isbn = {9781450324823},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2526968.2526978},
  doi = {10.1145/2526968.2526978},
  booktitle = {Proceedings of the 13th Koli Calling International Conference on Computing Education Research},
  pages = {87--95},
  numpages = {9},
  keywords = {tracing, misconception, CS1, novice programmers},
  location = {Koli, Finland},
  series = {Koli Calling '13}
}

@article{Snyder2019,
title = {Literature review as a research methodology: An overview and guidelines},
journal = {Journal of Business Research},
volume = {104},
pages = {333-339},
year = {2019},
issn = {0148-2963},
doi = {https://doi.org/10.1016/j.jbusres.2019.07.039},
url = {https://www.sciencedirect.com/science/article/pii/S0148296319304564},
author = {Hannah Snyder},
keywords = {Literature review, Synthesis, Research methodology, Systematic review, Integrative review},
abstract = {Knowledge production within the field of business research is accelerating at a tremendous speed while at the same time remaining fragmented and interdisciplinary. This makes it hard to keep up with state-of-the-art and to be at the forefront of research, as well as to assess the collective evidence in a particular area of business research. This is why the literature review as a research method is more relevant than ever. Traditional literature reviews often lack thoroughness and rigor and are conducted ad hoc, rather than following a specific methodology. Therefore, questions can be raised about the quality and trustworthiness of these types of reviews. This paper discusses literature review as a methodology for conducting research and offers an overview of different types of reviews, as well as some guidelines to how to both conduct and evaluate a literature review paper. It also discusses common pitfalls and how to get literature reviews published.}
}

%Har hopp om att få citera från artikeln nedan

@article{Sleeman1986,
author = {D. Sleeman and Ralph T. Putnam and Juliet Baxter and Laiani Kuspa},
title ={Pascal and High School Students: A Study of Errors},
journal = {Journal of Educational Computing Research},
volume = {2},
number = {1},
pages = {5-23},
year = {1986},
doi = {10.2190/2XPP-LTYH-98NQ-BU77},
URL = {https://doi.org/10.2190/2XPP-LTYH-98NQ-BU77},
eprint = {https://doi.org/10.2190/2XPP-LTYH-98NQ-BU77},
abstract = { A screening test was given to three classes of high school students, who were just completing introductory semester-long courses in Pascal. These tests were graded, and subsequently thirty-five students were given detailed clinical interviews. These interviews showed that errors were made with essentially every Pascal construct. Over half the students were classified as having major difficulties—fewer than 10 percent had no difficulties. The errors noted are discussed in detail in this article. A major finding is that the students attribute to the computer the reasoning power of an average person. The article also speculates about how difficult it might be to remediate the errors found, and concludes with an outline of future work. }
}

@inproceedings{GuoMarkelZhang2020,
author = {Guo, Philip J. and Markel, Julia M. and Zhang, Xiong},
title = {Learnersourcing at Scale to Overcome Expert Blind Spots for Introductory Programming: A Three-Year Deployment Study on the Python Tutor Website},
year = {2020},
isbn = {9781450379519},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3386527.3406733},
doi = {10.1145/3386527.3406733},
abstract = {It is hard for experts to create good instructional resources due to a phenomenon known as the expert blind spot: They forget what it was like to be a novice, so they cannot pinpoint exactly where novices commonly struggle and how to best phrase their explanations. To help overcome these expert blind spots for computer programming topics, we created a learnersourcing system that elicits explanations of misconceptions directly from learners while they are coding. We have deployed this system for the past three years to the widely-used Python Tutor coding website (pythontutor.com) and collected 16,791 learner-written explanations. To our knowledge, this is the largest dataset of explanations for programming misconceptions. By inspecting this dataset, we found surprising insights that we did not originally think of due to our own expert blind spots as programming instructors. We are now using these insights to improve compiler and run-time error messages to explain common novice misconceptions.},
booktitle = {Proceedings of the Seventh ACM Conference on Learning @ Scale},
pages = {301–304},
numpages = {4},
keywords = {programming, learnersourcing, python tutor, syntax errors},
location = {Virtual Event, USA},
series = {L@S '20}
}