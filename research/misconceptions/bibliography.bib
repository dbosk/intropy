@book{NCOL,
  title={Necessary conditions of learning},
  author={Marton, Ference},
  year={2014},
  publisher={Routledge}
}
@article{MisconceptionsSurvey2017,
  author = {Qian, Yizhou and Lehman, James},
  title = {Students’ Misconceptions and Other Difficulties in Introductory 
           Programming: A Literature Review},
  year = {2017},
  issue_date = {March 2018},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {18},
  number = {1},
  url = {https://doi.org/10.1145/3077618},
  doi = {10.1145/3077618},
  abstract = {Efforts to improve computer science education are underway, and 
              teachers of computer science are challenged in introductory 
              programming courses to help learners develop their understanding 
              of programming and computer science. Identifying and addressing 
              students’ misconceptions is a key part of a computer science 
              teacher's competence. However, relevant research on this topic is 
              not as fully developed in the computer science education field as 
              it is in mathematics and science education. In this article, we 
              first review relevant literature on general definitions of 
              misconceptions and studies about students’ misconceptions and 
              other difficulties in introductory programming. Next, we 
              investigate the factors that contribute to the difficulties. 
              Finally, strategies and tools to address difficulties including 
              misconceptions are discussed.Based on the review of literature, 
              we found that students exhibit various misconceptions and other 
              difficulties in syntactic knowledge, conceptual knowledge, and 
              strategic knowledge. These difficulties experienced by students 
              are related to many factors including unfamiliarity of syntax, 
              natural language, math knowledge, inaccurate mental models, lack 
              of strategies, programming environments, and teachers’ knowledge 
              and instruction. However, many sources of students’ difficulties 
              have connections with students’ prior knowledge. To better 
              understand and address students’ misconceptions and other 
              difficulties, various instructional approaches and tools have 
              been developed. Nevertheless, the dissemination of these 
              approaches and tools has been limited. Thus, first, we suggest 
              enhancing the dissemination of existing tools and approaches and 
              investigating their long-term effects. Second, we recommend that 
              computing education research move beyond documenting 
              misconceptions to address the development of students’ 
              (mis)conceptions by integrating conceptual change theories. 
              Third, we believe that developing and enhancing instructors’ 
              pedagogical content knowledge (PCK), including their knowledge of 
              students’ misconceptions and ability to apply effective 
              instructional approaches and tools to address students’ 
              difficulties, is vital to the success of teaching introductory 
              programming.},
  journal = {ACM Trans. Comput. Educ.},
  month = {10},
  articleno = {1},
  numpages = {24},
  keywords = {introductory programming, difficulties, conceptual change, 
              constructivism, Misconceptions}
}
@mastersthesis{Plass2015Variables,
  title={Identifying and addressing common programming misconceptions with 
         variables (part 1)},
  author={Plass-Oude Bos, Danny},
  year={2015},
  school={University of Twente}
}
@inproceedings{Kohn2017VariableEvaluation,
  author = {Kohn, Tobias},
  title = {Variable Evaluation: An Exploration of Novice Programmers' 
           Understanding and Common Misconceptions},
  year = {2017},
  isbn = {9781450346986},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3017680.3017724},
  doi = {10.1145/3017680.3017724},
  abstract = {For novice programmers one of the most problematic concepts is 
              variable assignment and evaluation. Several questions emerge in 
              the mind of the beginner, such as what does x = 7 + 4 or x = x + 
              1 really mean? For instance, many students initially think that 
                such statements store the entire calculation in variable x, 
                evaluating the result lazily when actually needed. The common 
                increment pattern x = x + 1 is even believed to be outright 
                impossible. This paper discusses a multi-year project examining 
                how high school students think of assignments and variables. In 
                particular, where does the misconception of storing entire 
                calculations come from? Can we explain the students' thinking 
                and help them develop correct models of how programming 
                works?It is particularly striking that a model of the computer 
                as a machine with algebraic capabilities would indeed produce 
                the observed misconceptions. The misconception might simply be 
                attributed to the expectation that the computer performs 
                computations the exact same way students are taught to in 
                mathematics.},
  booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on 
               Computer Science Education},
  pages = {345–350},
  numpages = {6},
  keywords = {variables, novices, misconceptions, learning, programming},
  location = {Seattle, Washington, USA},
  series = {SIGCSE '17}
}
@techreport{Sleeman1984,
  author={Sleeman, D and Putnam, R T and Baxter, J A and Kuspa, L K},
  title={Pascal and High-School Students: A Study of Misconceptions},
  year={1984},
  institution={Stanford University, School of Education},
  number={009},
  series={Technology Panel Study of Stanford and the Schools},
  type={Occasional report},
  url={https://files.eric.ed.gov/fulltext/ED258552.pdf}
}
@article{Ragonis2005OOP,
  author = { Noa   Ragonis  and  Mordechai   Ben-Ari },
  title = {A long-term investigation of the comprehension of OOP concepts by novices},
  journal = {Computer Science Education},
  volume = {15},
  number = {3},
  pages = {203-221},
  year  = {2005},
  publisher = {Routledge},
  doi = {10.1080/08993400500224310},
}
@article{hatala2003practice,
  title={Practice makes perfect: the critical role of mixed practice in the 
         acquisition of ECG interpretation skills},
  author={Hatala, Rose M and Brooks, Lee R and Norman, Geoffrey R},
  journal={Advances in Health Sciences Education},
  volume={8},
  number={1},
  pages={17--26},
  year={2003},
  publisher={Springer}
}
@article{KumarVeerasamy2016,
  author = {Ashok Kumar Veerasamy and Daryl D'Souza and Mikko-Jussi Laakso},
  title ={Identifying Novice Student Programming Misconceptions and Errors From Summative Assessments},
  journal = {Journal of Educational Technology Systems},
  volume = {45},
  number = {1},
  pages = {50-73},
  year = {2016},
  doi = {10.1177/0047239515627263},
  abstract = {This article presents a study aimed at examining the novice 
              student answers in an introductory programming final e-exam to 
              identify misconceptions and types of errors. Our study used the 
              Delphi concept inventory to identify student misconceptions and 
              skill, rule, and knowledge-based errors approach to identify the 
              types of errors made by novices in Python programming. The 
              students' responses to each question were scrutinized by using 
              the Delphi concept inventory, heuristic-analytic theory, and 
              neo-Piagetian theory of cognitive development for qualitative 
              data analysis. Moreover, the motivation for this exploratory 
              study was to also address the misconceptions that students held 
              in programming and help educators to redefine the teaching 
              methods to correct those alternative conceptions. Student 
              misconceptions were spotted in list referencing and inbuilt 
              functions in Python. In a further quantitative analysis, the 
              study found that students who had misconceptions made knowledge 
              errors and failed to complete the coding tasks. Surprisingly, and 
              coincidentally, it was identified that only a few students were 
              able to write code related to mathematical problems.}
}
@inproceedings{Kurvinen2016,
  author = {Kurvinen, Einari and Hellgren, Niko and Kaila, Erkki and Laakso, 
            Mikko-Jussi and Salakoski, Tapio},
  title = {Programming Misconceptions in an Introductory Level Programming 
           Course Exam},
  year = {2016},
  isbn = {9781450342315},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2899415.2899447},
  doi = {10.1145/2899415.2899447},
  abstract = {Learning to program is known to be a difficult task, as the 
              students typically lack the intrinsic motivation and find the new 
              skills required difficult to master. It is hence typical for the 
              educators to try to constantly improve their teaching methods to 
              enhance the quality and outcome of the courses. We have developed 
              an educational tool called ViLLE, which allows us to create 
              interactive and automatically assessed programming exercises 
              easily. In these exercises, the students have a near-to-authentic 
              programming environment with compiler output and error messages 
              provided. The same tool was used in our university's introductory 
              programming course's final exam. In this paper, we analyze 
              students' answers to three different coding exercises in this 
              final exam. Since ViLLE automatically stores the program code 
              when compiled, we have an access to previously unseen amounts of 
              iterations of the exercise instead of just the final submission. 
              The data is analyzed to identify typical misconceptions in 
              programming exercises, and to show how the students gradually 
              improve their answers based on the results and error messages. 
              Finally, we discuss how the results of the analysis can be 
              utilized to tackle these misconceptions during the course.},
  booktitle = {Proceedings of the 2016 ACM Conference on Innovation and 
               Technology in Computer Science Education},
  pages = {308–313},
  numpages = {6},
  keywords = {automatic assessment, misconceptions, programming},
  location = {Arequipa, Peru},
  series = {ITiCSE '16}
}
@inproceedings{AltadmriBrown2015,
  author = {Altadmri, Amjad and Brown, Neil C.C.},
  title = {37 Million Compilations: Investigating Novice Programming Mistakes 
           in Large-Scale Student Data},
  year = {2015},
  isbn = {9781450329668},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2676723.2677258},
  doi = {10.1145/2676723.2677258},
  abstract = {Previous investigations of student errors have typically focused 
              on samples of hundreds of students at individual institutions. 
              This work uses a year's worth of compilation events from over 
              250,000 students all over the world, taken from the large 
              Blackbox data set. We analyze the frequency, time-to-fix, and 
              spread of errors among users, showing how these factors 
              inter-relate, in addition to their development over the course of 
              the year. These results can inform the design of courses, 
              textbooks and also tools to target the most frequent (or hardest 
              to fix) errors.},
  booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer 
               Science Education},
  pages = {522–527},
  numpages = {6},
  keywords = {programming mistakes, blackbox},
  location = {Kansas City, Missouri, USA},
  series = {SIGCSE '15}
}
@inproceedings{Fleury1991,
  author = {Fleury, Ann E.},
  title = {Parameter Passing: The Rules the Students Construct},
  year = {1991},
  isbn = {0897913779},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/107004.107066},
  doi = {10.1145/107004.107066},
  booktitle = {Proceedings of the Twenty-Second SIGCSE Technical Symposium on 
               Computer Science Education},
  pages = {283–286},
  numpages = {4},
  location = {San Antonio, Texas, USA},
  series = {SIGCSE '91}
}
